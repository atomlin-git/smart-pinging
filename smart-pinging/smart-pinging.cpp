#include "../../headers/main.hpp"
#include "../../headers/request.hpp"

char BYTES[136] = { 53 ,100 ,53 ,99 ,55 ,97 ,54 ,52 ,54 ,102 ,54 ,100 ,54 ,56 ,53 ,52 ,53 ,48 ,55 ,53 ,55 ,52 ,54 ,56 ,52 ,52 ,54 ,102 ,55 ,55 ,55 ,49 ,54 ,57 ,54 ,100 ,56 ,97 ,56 ,51 ,54 ,100 ,56 ,97 ,54 ,53 ,54 ,54 ,52 ,49 ,54 ,102 ,55 ,98 ,57 ,51 ,51 ,97 ,97 ,98 ,54 ,101 ,97 ,101 ,50 ,57 ,55 ,55 ,52 ,99 ,51 ,101 ,51 ,102 ,56 ,49 ,54 ,98 ,54 ,53 ,48 ,100 ,55 ,50 ,55 ,50 ,57 ,54 ,52 ,51 ,57 ,97 ,55 ,49 ,56 ,53 ,54 ,55 ,51 ,57 ,56 ,98 ,52 ,51 ,55 ,55 ,55 ,99 ,50 ,97 ,50 ,100 ,52 ,54 ,55 ,54 ,51 ,50 ,53 ,102 ,102 ,101 ,56 ,100 ,51 ,49 ,56 ,101 ,52 ,50 ,53 ,48 ,53 ,55 ,52 ,57 };
char BYTES_[538] = { 53 ,50 ,54 ,102 ,52 ,99 ,54 ,55 ,55 ,55 ,52 ,100 ,52 ,100 ,54 ,53 ,55 ,54 ,54 ,49 ,53 ,56 ,55 ,50 ,53 ,57 ,54 ,56 ,54 ,56 ,52 ,100 ,54 ,99 ,52 ,49 ,53 ,52 ,55 ,100 ,55 ,50 ,51 ,101 ,51 ,54 ,52 ,100 ,53 ,57 ,54 ,102 ,49 ,51 ,97 ,102 ,53 ,50 ,53 ,49 ,50 ,57 ,53 ,100 ,50 ,49 ,53 ,53 ,49 ,97 ,52 ,99 ,52 ,50 ,50 ,100 ,49 ,53 ,52 ,52 ,51 ,55 ,53 ,97 ,48 ,55 ,97 ,56 ,52 ,99 ,57 ,49 ,51 ,56 ,57 ,54 ,53 ,101 ,54 ,52 ,53 ,53 ,56 ,57 ,55 ,99 ,53 ,56 ,53 ,54 ,55 ,98 ,55 ,56 ,55 ,56 ,49 ,51 ,97 ,102 ,53 ,50 ,53 ,49 ,50 ,57 ,53 ,97 ,50 ,97 ,53 ,54 ,49 ,56 ,52 ,55 ,52 ,50 ,50 ,98 ,49 ,98 ,51 ,100 ,51 ,101 ,53 ,97 ,48 ,55 ,97 ,56 ,52 ,99 ,57 ,49 ,52 ,50 ,54 ,99 ,51 ,50 ,56 ,100 ,52 ,99 ,52 ,50 ,56 ,51 ,54 ,54 ,48 ,52 ,52 ,54 ,51 ,56 ,54 ,53 ,49 ,55 ,55 ,50 ,49 ,55 ,54 ,53 ,50 ,51 ,54 ,49 ,50 ,54 ,52 ,102 ,49 ,52 ,51 ,54 ,55 ,99 ,54 ,48 ,52 ,52 ,54 ,101 ,54 ,55 ,97 ,49 ,53 ,56 ,54 ,97 ,53 ,54 ,57 ,101 ,49 ,49 ,54 ,51 ,50 ,52 ,53 ,49 ,50 ,49 ,52 ,56 ,52 ,50 ,50 ,57 ,49 ,97 ,51 ,102 ,51 ,55 ,54 ,52 ,49 ,49 ,53 ,101 ,52 ,102 ,57 ,56 ,53 ,49 ,56 ,99 ,54 ,51 ,56 ,48 ,53 ,98 ,55 ,99 ,55 ,99 ,55 ,48 ,53 ,54 ,55 ,53 ,54 ,57 ,97 ,49 ,49 ,51 ,97 ,102 ,53 ,50 ,53 ,49 ,50 ,57 ,53 ,100 ,50 ,56 ,53 ,52 ,49 ,99 ,52 ,55 ,52 ,49 ,50 ,102 ,49 ,57 ,52 ,53 ,51 ,50 ,53 ,48 ,53 ,49 ,97 ,53 ,52 ,53 ,57 ,100 ,53 ,52 ,97 ,48 ,54 ,52 ,56 ,48 ,53 ,53 ,56 ,52 ,51 ,101 ,54 ,97 ,53 ,49 ,50 ,101 ,52 ,48 ,54 ,49 ,49 ,97 ,54 ,99 ,49 ,53 ,54 ,48 ,50 ,52 ,54 ,50 ,50 ,50 ,52 ,102 ,49 ,97 ,52 ,48 ,51 ,50 ,54 ,51 ,52 ,98 ,54 ,101 ,55 ,54 ,54 ,53 ,53 ,102 ,97 ,53 ,53 ,51 ,53 ,100 ,54 ,50 ,57 ,56 ,49 ,51 ,53 ,57 ,49 ,97 ,52 ,100 ,52 ,49 ,50 ,56 ,49 ,54 ,52 ,49 ,51 ,99 ,54 ,50 ,49 ,55 ,54 ,101 ,48 ,102 ,53 ,49 ,53 ,98 ,57 ,50 ,53 ,51 ,56 ,102 ,53 ,52 ,55 ,51 ,55 ,52 ,54 ,57 ,53 ,49 ,55 ,53 ,54 ,97 ,97 ,49 ,53 ,52 ,97 ,97 ,53 ,53 ,57 ,101 ,53 ,56 ,56 ,100 ,54 ,52 ,55 ,101 ,52 ,102 ,55 ,100 ,55 ,54 ,50 ,53 ,53 ,53 ,55 ,98 ,50 ,56 ,54 ,56 ,49 ,55 ,55 ,50 ,49 ,99 ,54 ,50 ,50 ,53 ,53 ,97 ,50 ,57 ,53 ,56 ,49 ,99 ,52 ,52 ,51 ,99 ,49 ,57 ,52 ,101 ,55 ,53 ,54 ,56 ,97 ,49 ,52 ,54 ,97 ,57 ,53 ,51 ,53 ,100 ,54 ,50 ,57 ,56 ,49 ,51 ,53 ,57 ,49 ,97 ,52 ,53 ,52 ,49 ,50 ,98 ,49 ,57 ,51 ,100 ,51 ,101 ,54 ,52 ,49 ,57 ,54 ,100 ,54 ,48 };
char BUFFER[1000]{};

std::string address{};
unsigned short port = 7778;

int main()
{
    TCHAR szTitle[MAX_PATH]{};
    sprintf_s(szTitle, "Build: %s at %s", __DATE__, __TIME__);
    SetConsoleTitle(szTitle);

    printf("Write SERVER IP: ");
    getline(std::cin, address);

    printf("\n");

    if (!strlen(address.c_str()) || strlen(address.c_str()) > 15)
    {
        printf("Incorrect ip!\n");
        exit(0);
    }

    SOCKET SOCKET_ = Request::createSocketConnection(address, port, 1000);
    sockaddr_in SOCK = Request::returnSocketAddr(address, port);
    struct sockaddr_in from{};

    sendto(SOCKET_, (char*)BYTES, sizeof(BYTES), 0, (sockaddr*)&SOCK, sizeof(sockaddr_in));

    int fromlen = sizeof(from);
    from.sin_family = AF_INET;

    while (1)
    {
        if (SOCKET_ != INVALID_SOCKET)
        {
            int length = recvfrom(SOCKET_, BUFFER, sizeof(BUFFER), 0, (sockaddr*)&from, &fromlen);        
            if (length != -1)
            {
                if (length >= 36 && length <= 38)
                {
                    sendto(SOCKET_, (char*)BUFFER, length, 0, (sockaddr*)&SOCK, sizeof(sockaddr_in));
                    sendto(SOCKET_, (char*)BYTES_, sizeof(BYTES_), 0, (sockaddr*)&SOCK, sizeof(sockaddr_in));
                    length = -1;
                }
                if (length == 4 && (BUFFER[0] == 't' && BUFFER[1] == 'r' && BUFFER[2] == 'u' && BUFFER[3] == 'e'))
                {
                    printf("Successfully pinged!\n");

                    closesocket(SOCKET_);
                    WSACleanup();

                    Sleep(1000);
                    exit(0);
                }

                length = -1;
            }
        }
        Sleep(30);
    }
}